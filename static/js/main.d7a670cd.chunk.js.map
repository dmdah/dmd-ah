{"version":3,"sources":["img/kakao.png","img/watcha.png","img/starbucks.png","img/socar.png","img/cgv.png","img/eleven.png","IconexConnect.js","config.js","SDK.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IconexConnect","getAddress","Promise","resolve","window","addEventListener","eventHandler","event","_event$detail","detail","type","payload","removeEventListener","dispatchEvent","CustomEvent","sendTransaction","params","_event$detail2","result","config","PROVIDER_URL","NID","CONTRACT_ADDRESS","provider","HttpProvider","iconService","IconService","CallBuilder","IconBuilder","CallTransactionBuilder","SDK","callBuild","_ref","arguments","length","undefined","from","methodName","to","_ref$params","method","build","sendTxBuild","_ref2","_ref2$params","_ref2$networkId","networkId","_ref2$stepLimit","stepLimit","_ref2$value","value","jsonrpc","nid","timestamp","concat","Date","getTime","toString","version","id","SHUFFLED_EVENT_LIST","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","title","color","img","kakao","endBlock","winnerCnt","eleven","starbucks","watcha","socar","cgv","Card","state","showParticipants","participants","toggleParticipants","_callee","regenerator_default","a","wrap","_context","prev","next","_this","setState","stop","this","props","call","event_label","IconConverter","toHex","execute","participantsArr","split","splice","_this$state","console","log","_this$props","handleSubmit","react_default","createElement","className","style","background","overflow","listStyle","margin","padding","fontSize","lineHeight","map","participant","i","src","alt","onClick","Component","App","myAddress","handleLogin","_callee3","_context3","sent","_this2","_ref3","Object","asyncToGenerator","mark","_callee4","txObj","_context4","alert","abrupt","t0","_x2","apply","_this3","width","disabled","App_Card","key","handleViewSubscriber","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7a670cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kakao.d7a92a48.png\";","module.exports = __webpack_public_path__ + \"static/media/watcha.5363f94d.png\";","module.exports = __webpack_public_path__ + \"static/media/starbucks.d08e3832.png\";","module.exports = __webpack_public_path__ + \"static/media/socar.ba1263f6.png\";","module.exports = __webpack_public_path__ + \"static/media/cgv.528dc63c.png\";","module.exports = __webpack_public_path__ + \"static/media/eleven.deff3656.png\";","const getAddress = () => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_ADDRESS') {\n        resolve(payload);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_ADDRESS',\n      },\n    }));\n  });\n  \n  \n  const sendTransaction = params => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_JSON-RPC') {\n        resolve(payload.result);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_JSON-RPC',\n        payload: params,\n      },\n    }));\n  });\n  \n  export default {\n    getAddress,\n    sendTransaction,\n  };","export default {\n    PROVIDER_URL: 'https://bicon.net.solidwallet.io/api/v3',\n    NID: '0x3',\n    CONTRACT_ADDRESS: 'cx9e468b70a8ee160d48b2cdff20ea7eafbbc743f1',\n}","import IconService, {\n    HttpProvider,\n    IconBuilder,\n  } from 'icon-sdk-js'\n  import config from './config'\n  \n  const provider = new HttpProvider(config.PROVIDER_URL)\n  const iconService = new IconService(provider)\n  \n  const {\n    CallBuilder,\n    CallTransactionBuilder,\n  } = IconBuilder;\n  \n  const callBuild = ({\n    from,\n    methodName,\n    to,\n    params = {},\n  } = {}) => {\n    const callBuilder = new CallBuilder();\n    const obj = callBuilder\n      .from(from)\n      .to(to)\n      .method(methodName)\n      .params(params)\n      .build();\n    return obj;\n  };\n  \n  const sendTxBuild = ({\n    from,\n    to,\n    methodName,\n    params = {},\n    networkId = config.NID,\n    stepLimit = '0x493e0',\n    value = '0x0',\n  } = {}) => {\n    const callTransactionBuilder = new CallTransactionBuilder();\n    const obj = callTransactionBuilder\n      .nid(networkId)\n      .from(from)\n      .to(to)\n      .stepLimit(stepLimit)\n      .value(value)\n      .timestamp(`0x${((new Date()).getTime() * 1000).toString(16)}`)\n      .method(methodName)\n      .params(params)\n      .version('0x3')\n      .build();\n  \n    return {\n      jsonrpc: '2.0',\n      method: 'icx_sendTransaction',\n      params: obj,\n      id: 1,\n    };\n  };\n  \n  export default {\n    iconService,\n    callBuild,\n    sendTxBuild,\n  }","import React, { Component } from 'react';\nimport './App.css';\nimport IconexConnect from './IconexConnect';\nimport {\n  IconConverter\n} from 'icon-sdk-js'\nimport SDK from './SDK';\nimport config from './config';\nimport kakao from './img/kakao.png'\nimport watcha from './img/watcha.png'\nimport starbucks from './img/starbucks.png'\nimport socar from './img/socar.png'\nimport cgv from './img/cgv.png'\nimport eleven from './img/eleven.png'\n\nfunction shuffle(array) {\n  let currentIndex = array.length, temporaryValue, randomIndex;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nconst EVENT_LIST = [\n  {\n    title: '카카오프렌즈 이모티콘 30개!',\n    color: '#FFE812',\n    img: kakao,\n    id: 0,\n    endBlock: 1650000,\n    winnerCnt: 5,\n  }, \n  {\n    title: '7ELEVEN 만원 상품권 GET!',\n    color: '#f6c3ab',\n    img: eleven,\n    id: 1,\n    endBlock: 1500000,\n    winnerCnt: 4,\n  }, \n  {\n    title: 'Starbucks 텀블러 가져가요~',\n    color: '#08f26e',\n    img: starbucks,\n    id: 2,\n    endBlock: 1400000,\n    winnerCnt: 3,\n  }, \n  {\n    title: 'Watcha 선정 멜로영화 10선 시사회에 초대합니다.',\n    color: '#f2cccc',\n    img: watcha,\n    id: 3,\n    endBlock: 2000000,\n    winnerCnt: 10,\n  }, \n  {\n    title: '쏘카 1일 자유이용권 드려요~',\n    color: '#e8ffff',\n    img: socar,\n    id: 4,\n    endBlock: 1500000,\n    winnerCnt: 20,\n  }, \n  {\n    title: 'CGV에서 공짜 팝콘 먹자!',\n    color: '#e1e1e1',\n    img: cgv,\n    id: 5,\n    endBlock: 1200000,\n    winnerCnt: 200,\n  }, \n]\n\nconst SHUFFLED_EVENT_LIST = shuffle(EVENT_LIST)\n\nclass Card extends Component {\n\n  state = {\n    showParticipants: false,\n    participants: []\n  }\n\n  async componentDidMount() {\n    const { event } = this.props\n    const { iconService, callBuild } = SDK\n    const participants = await iconService.call(\n      callBuild({\n        methodName: 'get_participants',\n        params: {\n          event_label: IconConverter.toHex(event.id), \n        },\n        to: config.CONTRACT_ADDRESS,\n      })\n    ).execute()\n    const participantsArr = participants ? participants.split(',').splice(0, participants.split(',').length - 1) : []\n    this.setState({\n      participants: participantsArr\n    })\n  }\n\n  toggleParticipants = async event => {\n    // const { sendTxBuild } = SDK\n    // const { myAddress } = this.state\n    // const txObj = sendTxBuild({\n    //   from: 'hxebf3a409845cd09dcb5af31ed5be5e34e2af9433',\n    //   to: config.CONTRACT_ADDRESS,\n    //   methodName: 'add_event',\n    //   params: {\n    //     event_label: IconConverter.toHex(5), \n    //     cnt_winner: IconConverter.toHex(200), \n    //     end_block: IconConverter.toHex(1200000)\n    //   },\n    // })\n    // const tx = await IconexConnect.sendTransaction(txObj)\n    // console.log(tx)\n    this.setState({\n      showParticipants: !this.state.showParticipants\n    })\n  }\n\n  render() {\n    const { showParticipants, participants } = this.state\n    console.log(participants)\n    const { event, handleSubmit } = this.props\n    return (\n      <div className=\"card\">\n        {\n          showParticipants\n            ? (\n              <div className=\"bg\" style={{ background: event.color, overflow: 'auto' }}>\n                <ul style={{\n                  listStyle: 'none',\n                  margin: 0,\n                  padding: 0,\n                  fontSize: '10px',\n                  lineHeight: '180%'\n                }}>\n                  {\n                    participants.length > 0 \n                      ? participants.map((participant, i) => (\n                        <li>{participant}</li>\n                      ))\n                      : <li>아직 응모자가 없습니다.</li>\n                  }\n                </ul>\n              </div>\n            ) : (\n              <div className=\"bg\" style={{ background: event.color }}>\n                <div className=\"imgWrap\"><img src={event.img} alt={event.title} /></div>\n                <p>응모기한 - {event.endBlock} 블록</p>\n                <p>당첨자수 - {event.winnerCnt} 명</p>\n              </div>\n            )\n        }\n        <div className=\"control\">\n          <h2 className=\"title\">{ event.title }</h2>\n          <button onClick={handleSubmit(event.id)} className=\"button\" style={{ background: event.color }}>응뭐하기</button>\n          <button onClick={this.toggleParticipants} className=\"button\" style={{ background: event.color }}>\n            { showParticipants ? '정보 보기' : '응모자 보기' }\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default class App extends Component {\n\n  state = {\n    myAddress: ''\n  }\n\n  handleLogin = async () => {\n    const myAddress = await IconexConnect.getAddress()\n    this.setState({\n      myAddress\n    })\n  }\n\n  handleSubmit = id => async event => {\n    if (!this.state.myAddress) {\n      alert('먼저 로그인해주세요.')\n      return\n    }\n\n    try {\n      const { sendTxBuild } = SDK\n      const { myAddress } = this.state\n      const txObj = sendTxBuild({\n        from: myAddress,\n        to: config.CONTRACT_ADDRESS,\n        methodName: 'subscribe_event',\n        params: {\n          event_label: IconConverter.toHex(id), \n        },\n      })\n      const tx = await IconexConnect.sendTransaction(txObj)\n      alert('응모되었습니다!')\n    } catch (e) {\n      alert('오류로 인해 응모하지 못하였습니다.')\n    }\n  }\n\n  render() {\n    const { myAddress } = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>응? 뭐!</h1>\n          {\n            myAddress \n              ? <button style={{width: 400}} disabled>{myAddress} 님, 안녕하세요.</button>\n              : <button onClick={this.handleLogin}>ICONex 로그인하기</button>\n          }\n        </div>\n        <div className=\"container\">\n          {\n            SHUFFLED_EVENT_LIST.map((event, i) => (\n              <Card \n                key={i} \n                event={event} \n                handleSubmit={this.handleSubmit} \n                handleViewSubscriber={this.handleViewSubscriber} />\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}